import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:provider_state_management/provider/add_to_cart_provider.dart';

import 'cart_Items_screen.dart';

class AllMoviesListScreen extends StatefulWidget {
  const AllMoviesListScreen({super.key});

  @override
  State<AllMoviesListScreen> createState() => _AllMoviesListScreenState();
}

class _AllMoviesListScreenState extends State<AllMoviesListScreen> {
  @override
  Widget build(BuildContext context) {

    // 'watch' means that we are watching the 'movieList' thus we are telling the 'ChangeNotifier' to notify us as soon as there is any change in the list
    var moviesNewList = context.watch<AddToCartProvider>().moviesList;
    var myCartItemsList = context.watch<AddToCartProvider>().myCartList;   // This makes the widget listen for changes in the Model, ie., we are basically telling the provider class to watch the following list or variable, and if any change occurs inform me.

    return Scaffold(
      appBar: AppBar(
        title: const Text('Provider Add To Cart'),
      ),

      body: Padding(
        padding: const EdgeInsets.all(15),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [

            ElevatedButton.icon(
                onPressed: () {
                  Navigator.of(context).push(MaterialPageRoute(builder: (context) => const CartItemsScreen(),
                  ));
                },
              icon: const Icon(Icons.favorite, color: Colors.white,),
              label: Text(
                "Go to my Cart List      (${myCartItemsList.length})",  // here the length of cart will be displayed as well dynamically because "myCartItemsList" is a dynamic list
                style: const TextStyle(fontSize: 24,color: Colors.white),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                padding: const EdgeInsets.symmetric(vertical: 20)
              ),
            ),

            const SizedBox(height: 15,),

            Expanded(
                child: ListView.builder(
                  itemCount: moviesNewList.length,
                    itemBuilder: (context, index) {

                    // index-wise all the movie objects are stored in the 'currentMovie' Object
                    final currentMovie = moviesNewList[index];

                      return Card(
                        key: ValueKey(currentMovie.title),
                        color: Colors.blue,
                        elevation: 4,
                        child: ListTile(
                          title: Text(currentMovie.title, style: const TextStyle(color: Colors.white),),
                          subtitle: Text(currentMovie.duration ?? "No information found",style: const TextStyle(color: Colors.white),),
                          trailing: IconButton(
                            icon: Icon(
                              Icons.favorite,
                              // if the 'currentMovie' is already added to the Cart so this icon's color will be red and if it is not available in the cart then the favorite icon's color will be white
                              color: myCartItemsList.contains(currentMovie) ? Colors.red : Colors.white,
                              size: 30,
                            ),
                            onPressed: () {
                              if(!myCartItemsList.contains(currentMovie)) {
                                // if the current item is not in the cart then add it on click of favorite icon

                                // 'currentMovie' object has the list of all movies index-wise. And here the card is generated by 'ListView.builder' as object and thus each card has by default a specific index.
                                //... Thus, when we click { "favorite icon" and say "add currentMovie to list" } means by default the list will pick up that specific list item index-wise which is clicked and add it to cart list
                                context.read<AddToCartProvider>().addToList(currentMovie);  ///  This returns the Model without listening for any changes ie; it is used to call a method from the provider class.
                              } else {
                                context.read<AddToCartProvider>().removeFromList(currentMovie);
                              }
                            },
                          ),
                        ),
                      );
                    },
                )
            )
          ],
        ),
      ),
    );
  }
}
